package com.example.mytaskmanager;

import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.DialogPane;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.shape.Circle;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.event.ActionEvent;
import java.sql.SQLException;

import java.io.File;
import java.io.IOException;
import java.util.Objects;

public class SceneController {

    private Stage stage;
    private Scene scene;
    private Parent root;
    private final Image bronzeCard = new Image("com/example/mytaskmanager/card_bronze.png");
    private final Image silverCard = new Image("com/example/mytaskmanager/card_silver.png");
    private final Image goldCard = new Image("com/example/mytaskmanager/card_gold.png");

    private final String example = "bronze";
    private String selectedTask = "";

    Card myCard = new Card();

    //-----------------------------------------LABELS
    @FXML
    private Label usernameLabel;

    @FXML
    private Label levelLabel;

    @FXML
    private Label experienceLabel;

    @FXML
    private Label completeTaskRewardLabel;

    @FXML
    private Label completeAchievementRewardLabel;

    //---------------------------------------IMAGE VIEWS
    @FXML
    private ImageView cardView;

    @FXML
    private ImageView profilePic;

    @FXML
    private ImageView slot1;

    @FXML
    private ImageView slot2;

    @FXML
    private ImageView slot3;

    @FXML
    private ImageView slot4;

    @FXML
    private ImageView slot5;

    @FXML
    private ImageView slot6;

    @FXML
    private ImageView slot7;

    @FXML
    private ImageView slot8;

    //---------------------------------------LIST VIEWS
    @FXML
    private ListView<String> availableStickersListView;

    //TRIAL
    Sticker StickerSmile = new Sticker(1, "Smile", "C:/Users/fonte/Desktop/Stickers/smileSticker.png");
    Sticker Sticker100 = new Sticker(2, "100", "C:/Users/fonte/Desktop/Stickers/Sticker100.png");
    Sticker Sticker500 = new Sticker(3, "500", "C:/Users/fonte/Desktop/Stickers/Sticker500.png");
    Sticker StickerBook = new Sticker(4, "Book", "C:/Users/fonte/Desktop/Stickers/StickerBook.png");
    Sticker StickerCommunity = new Sticker(5, "Community", "C:/Users/fonte/Desktop/Stickers/StickerCommunity.png");
    Sticker StickerCrown = new Sticker(6, "Crown", "C:/Users/fonte/Desktop/Stickers/StickerCrown.png");
    Sticker StickerMedal = new Sticker(7, "Medal", "C:/Users/fonte/Desktop/Stickers/StickerMedal.png");
    Sticker StickerNeverGiveUp = new Sticker (8, "NeverGiveUp","C:/Users/fonte/Desktop/Stickers/StickerNeverGiveUp.png");
    Sticker StickerPuzzle = new Sticker (9, "Puzzle", "C:/Users/fonte/Desktop/Stickers/StickerPuzzle.png");
    Sticker StickerWeight = new Sticker (10, "Weight", "C:/Users/fonte/Desktop/Stickers/StickerWeight.png");
    Sticker StickerGigachad = new Sticker(11, "Gigachad", "C:/Users/fonte/Desktop/Stickers/StickerGigachad.png");

    Sticker[] unlockedStickers = {StickerSmile, Sticker100, Sticker500, StickerBook, StickerCommunity,
                                    StickerCrown, StickerMedal, StickerNeverGiveUp, StickerPuzzle,
                                    StickerWeight, StickerGigachad};
    String currentStickers;

    @FXML
    private ListView<String> slotsListView;
    String[] slots = {"Slot1", "Slot2", "Slot3", "Slot4", "Slot5", "Slot6", "Slot7", "Slot8", "Remove all stickers"};
    String currentSlots;

    String mySticker;
    String mySlot;
    String finalUrl;

    //---------------------------------------TEXT FIELDS
    @FXML
    private TextField usernameTextField;

    //---------------------------------------DIALOG PANES

    @FXML
    private DialogPane startingMessageDialogPane;
    @FXML
    private DialogPane logoutDialogPane;

    @FXML
    private DialogPane askMoteeveDialogPane;

    @FXML
    private DialogPane changeUsernameDialogPane;

    @FXML
    private DialogPane completeTaskDialogPane;

    @FXML
    private DialogPane completeAchievementDialogPane;

    @FXML
    private DialogPane customizeProfileDialogPane;

    @FXML
    private DialogPane selectStickerDialogPane;

    @FXML
    private DialogPane selectSlotDialogPane;

    //-----------------------------------------------------MANAGEMENT
    public void setAllDialogPanesInvisible() {

        logoutDialogPane.setVisible(false);
        askMoteeveDialogPane.setVisible(false);
        changeUsernameDialogPane.setVisible(false);
        customizeProfileDialogPane.setVisible(false);
        selectStickerDialogPane.setVisible(false);
        selectSlotDialogPane.setVisible(false);

    }

    //-----------------------------------------------------STAGE SWITCH
    @FXML
    public void switchToProfileScene(ActionEvent event) throws IOException {
        root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("profileScene.fxml")));
        stage = (Stage)((Node)event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    public void switchToMainScene(ActionEvent event) throws IOException {
        root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("mainScene.fxml")));
        stage = (Stage)((Node)event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    public void switchToAchievementScene(ActionEvent event) throws IOException {
        root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("achievementScene.fxml")));
        stage = (Stage)((Node)event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    public void putOffStartingMessage() throws SQLException {
        startingMessageDialogPane.setVisible(false);

        //RECUPERO USERNAME
        ChangeUsernameController controller = new ChangeUsernameController();
        ChangeUsernameBean bean = controller.retrieveCurrentUsername();
        usernameLabel.setText(bean.getCurrentName());

        //RECUPERO EXP
        String text1 = Integer.toString(myCard.retrieveExperience());
        experienceLabel.setText(text1 + " / 1000");
        System.out.println("Retrieved experience: " + text1);

        //RECUPERO LIVELLO
        String text2 = Integer.toString(myCard.retrieveLevel());
        levelLabel.setText("LVL " + text2);
        System.out.println("Retrieved level: " + text2);

        //RECUPERO IMMAGINE DI PROFILO
        Circle clip = new Circle(profilePic.getFitWidth());
        clip.setRadius(50.0);
        clip.setCenterX(profilePic.getX() + 50);
        clip.setCenterY(profilePic.getY() + 50);
        profilePic.setClip(clip);

        String text3 = myCard.retrieveProfileImage();
        Image pic = new Image(text3);
        profilePic.setImage(pic);
        System.out.println("Retrieved profile pic :" + text3);

        //RECUPERO STICKER SULLA CARD
        myCard.retrieveStickersOnCard();

        setAllDialogPanesInvisible();
    }


    //-------------------------------------------------CHANGE USERNAME
    @FXML
    public void changeUsernameTry() {
        setAllDialogPanesInvisible();
        changeUsernameDialogPane.setVisible(true);
    }

    @FXML
    public void changeUsernameFail() {
        changeUsernameDialogPane.setVisible(false);
    }

    @FXML
    public void changeUsernameSuccess() throws SQLException {
        String username = usernameTextField.getText();
        ChangeUsernameController controller = new ChangeUsernameController();
        ChangeUsernameBean bean = controller.setNewUsername(username);
        usernameLabel.setText(bean.getNewName());
        changeUsernameDialogPane.setVisible(false);
    }

    //-----------------------------------------------------ASK MOTEEVE
    @FXML
    public void askMoteeveTry() {
        setAllDialogPanesInvisible();
        askMoteeveDialogPane.setVisible(true);
    }

    @FXML
    public void askMoteeveSuccess() {
        askMoteeveDialogPane.setVisible(false);
    }

    //------------------------------------------------------LOGOUT
    @FXML
    public void logoutTry() {
        setAllDialogPanesInvisible();
        logoutDialogPane.setVisible(true);
    }

    @FXML
    public void logoutFail() {
        logoutDialogPane.setVisible(false);
    }

    @FXML
    public void logoutSuccess() {
        System.exit(0);
    }

    //------------------------------------------------------COMPLETE TASK
    @FXML
    public void completeDailyTaskTry() {
        completeTaskDialogPane.setVisible(true);
        selectedTask = "daily";
        completeTaskRewardLabel.setText("Rewards: 100 experience points");
    }

    @FXML
    public void completeWeeklyTaskTry() {
        completeTaskDialogPane.setVisible(true);
        selectedTask = "weekly";
        completeTaskRewardLabel.setText("Rewards: 500 experience points");
    }

    @FXML
    public void completeTaskFail() {
        selectedTask = "";
        completeTaskDialogPane.setVisible(false);
    }

    @FXML
    public void completeTaskSuccess() throws SQLException {

        int increm = 0;

        if (selectedTask.equals("daily")) {

            increm = 100;

        } else if (selectedTask.equals("weekly")){

            increm = 500;

        }

        if ((myCard.retrieveExperience() + increm)  <= 1000) {
            int newExp = myCard.retrieveExperience() + 100;
            myCard.setExperience(newExp);
            myCard.updateExperienceInDB(newExp);
        }
        else {
            int newExp = myCard.retrieveExperience() + increm - 1000;
            myCard.setExperience(newExp);
            myCard.updateExperienceInDB(newExp);
            int newLevel = myCard.retrieveLevel() + 1;
            myCard.setLevel(newLevel);
            myCard.updateLevelInDB(newLevel);
        }

        completeTaskDialogPane.setVisible(false);



        selectedTask = "";
        completeTaskDialogPane.setVisible(false);

    }

    //-----------------------------------------------------COMPLETE ACHIEVEMENTS
    @FXML
    public void completeAchievementTry() {
        completeAchievementDialogPane.setVisible(true);
        completeAchievementRewardLabel.setText("Rewards: " + "INFO FROM DB");
    }

    @FXML
    public void completeAchievementFail() {
        completeAchievementDialogPane.setVisible(false);
    }

    @FXML
    public void completeAchievementSuccess() {
        System.out.println("TBD");
        completeAchievementDialogPane.setVisible(false);
    }

    //-------------------------------------------------CHANGE CARD COLOR
    @FXML
    public void setCardColor(String newColor) {

        if (newColor.equals("bronze")) {
            cardView.setImage(bronzeCard);
        }

        if (newColor.equals("silver")) {
            cardView.setImage(silverCard);
        }

        if (newColor.equals("gold")) {
            cardView.setImage(goldCard);
        }

    }

    //------------------------------------------------CUSTOMIZE PROFILE
    @FXML
    public void customizeProfileTry() {
        setAllDialogPanesInvisible();
        customizeProfileDialogPane.setVisible(true);
    }

    @FXML
    public void customizeProfileFail() {
        customizeProfileDialogPane.setVisible(false);
    }

    @FXML
    public void changeProfilePic() {

        //FILE SELECTION
        FileChooser chooser = new FileChooser();
        FileChooser.ExtensionFilter extFilter1 = new FileChooser.ExtensionFilter("Images", "*.png");
        chooser.setTitle("Select new profile pic (must be png format)");
        chooser.getExtensionFilters().addAll(extFilter1);
        File selectedFile = chooser.showOpenDialog(stage);

        //AFTER FILE SELECTION
        if (selectedFile != null) {

            Circle clip = new Circle(profilePic.getFitWidth());
            clip.setRadius(50.0);
            clip.setCenterX(profilePic.getX() + 50);
            clip.setCenterY(profilePic.getY() + 50);
            profilePic.setClip(clip);

            Image myPic = new Image(selectedFile.getPath());
            profilePic.setImage(myPic);
            setAllDialogPanesInvisible();

        }

    }

    @FXML
    public void addStickersToCardTry() {

        setAllDialogPanesInvisible();
        selectStickerDialogPane.setVisible(true);
        availableStickersListView.getItems().clear();

        int i;
        for (i = 0; i < unlockedStickers.length; i++) {

            if (unlockedStickers[i] != null && unlockedStickers[i].getUrl() != null) {
                availableStickersListView.getItems().addAll(unlockedStickers[i].getName());
            }
        }

    }

    @FXML
    public void addStickersToCardFail() {
        setAllDialogPanesInvisible();
        customizeProfileDialogPane.setVisible(true);
    }

    @FXML
    public void addStickersToCardSuccess() {

        int index = availableStickersListView.getSelectionModel().getSelectedIndex();
        if (unlockedStickers[index] != null) {
            System.out.println("You selected sticker: " + unlockedStickers[index].getName());
            finalUrl  = unlockedStickers[index].getUrl();
            selectSlotTry();
        } else {
            System.out.println("No sticker was selected");
        }

    }

    @FXML
    public void selectSlotTry() {
        setAllDialogPanesInvisible();
        selectSlotDialogPane.setVisible(true);
        slotsListView.getItems().clear();
        slotsListView.getItems().addAll(slots);
    }

    @FXML
    public void selectSlotFail() {
        setAllDialogPanesInvisible();
        selectStickerDialogPane.setVisible(true);
    }

    @FXML
    public void selectSlotSuccess() {

        String selectedSlot = slotsListView.getSelectionModel().getSelectedItem();
        if (selectedSlot != null) {
            System.out.println("Your selected slot: " + selectedSlot);
            mySlot = selectedSlot;
            applicateStickerToSlot();
        } else {
            System.out.println("No Slot was selected");
        }

    }

    public void applicateStickerToSlot() {

        //RETRIEVE STICKER URL SEARCHING BY NAME IN THE DB
        Image stickerToAdd = new Image(finalUrl);

        switch (mySlot) {

            case "Slot1":
                slot1.setImage(stickerToAdd);
                break;
            case "Slot2":
                slot2.setImage(stickerToAdd);
                break;
            case "Slot3":
                slot3.setImage(stickerToAdd);
                break;
            case "Slot4":
                slot4.setImage(stickerToAdd);
                break;
            case "Slot5":
                slot5.setImage(stickerToAdd);
                break;
            case "Slot6":
                slot6.setImage(stickerToAdd);
                break;
            case "Slot7":
                slot7.setImage(stickerToAdd);
                break;
            case "Slot8":
                slot8.setImage(stickerToAdd);
                break;
            case "Remove all stickers":
                slot1.setImage(null);
                slot2.setImage(null);
                slot3.setImage(null);
                slot4.setImage(null);
                slot5.setImage(null);
                slot6.setImage(null);
                slot7.setImage(null);
                slot8.setImage(null);
            default :
                System.out.println("Error");
                break;
        }
        setAllDialogPanesInvisible();
    }

}
